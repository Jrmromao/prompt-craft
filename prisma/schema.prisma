generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  clerkId           String             @unique
  credits           Int                @default(10)
  name              String?
  role              Role               @default(USER)
  planType          PlanType           @default(FREE)
  creditCap         Int                @default(10)
  lastCreditReset   DateTime           @default(now())
  stripeCustomerId  String?
  onboarded         Boolean            @default(false)
  imageUrl          String?            // URL to user's profile image
  bio               String?            // User's bio/description
  jobTitle          String?            // User's job title
  location          String?            // User's location
  company           String?            // User's company
  website           String?            // User's website
  twitter           String?            // User's Twitter handle
  linkedin          String?            // User's LinkedIn profile
  emailPreferences  Json?              @default("{\"marketingEmails\":true,\"productUpdates\":true,\"securityAlerts\":true}")
  notificationSettings Json?           @default("{\"emailNotifications\":true,\"pushNotifications\":true,\"browserNotifications\":true}")
  languagePreferences Json?            @default("{\"language\":\"en\",\"dateFormat\":\"MM/DD/YYYY\",\"timeFormat\":\"12h\"}")
  themeSettings     Json?              @default("{\"theme\":\"system\",\"accentColor\":\"purple\"}")
  securitySettings  Json?              @default("{\"twoFactorEnabled\":false,\"sessionTimeout\":30}")
  apiKeys           ApiKey[]
  creditHistory     CreditHistory[]
  prompts           Prompt[]
  promptGenerations PromptGeneration[]
  promptTemplates   PromptTemplate[]
  subscription      Subscription?
}

model Plan {
  id              String         @id @default(cuid())
  name            String         @unique
  price           Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isActive        Boolean        @default(true)
  credits         Int
  period          Period
  description     String
  stripeProductId String         @unique
  subscriptions   Subscription[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  planId               String
  plan                 Plan               @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model Prompt {
  id          String   @id @default(cuid())
  userId      String
  createdAt   DateTime @default(now())
  content     String
  description String?
  isPublic    Boolean  @default(false)
  metadata    Json?
  name        String
  promptType  String
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  tags        Tag[]    @relation("PromptToTag")
  upvotes     Int      @default(0)
  isApproved  Boolean  @default(false)
  slug        String  @unique

  @@index([userId])
  @@index([promptType])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompts   Prompt[] @relation("PromptToTag")

  @@index([name])
}

model CreditHistory {
  id          String     @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  content     String
  isPublic    Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptGeneration {
  id          String   @id @default(cuid())
  userId      String
  promptType  String
  input       String
  output      String
  creditsUsed Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptType])
  @@index([createdAt])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  LITE
  PRO
}

enum Period {
  WEEKLY
  MONTHLY
}

enum CreditType {
  INITIAL
  SUBSCRIPTION
  USAGE
  TOP_UP
  REFUND
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}
