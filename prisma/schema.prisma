generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  clerkId                   String                     @unique
  name                      String?
  role                      Role                       @default(USER)
  creditCap                 Int                        @default(100)
  lastCreditReset           DateTime?
  stripeCustomerId          String?
  planType                  PlanType                   @default(FREE)
  imageUrl                  String?
  bio                       String?
  company                   String?
  jobTitle                  String?
  linkedin                  String?
  location                  String?
  twitter                   String?
  website                   String?
  emailPreferences          Json?                      @default("{\"productUpdates\": true, \"securityAlerts\": true, \"marketingEmails\": true}")
  languagePreferences       Json?                      @default("{\"language\": \"en\", \"dateFormat\": \"MM/DD/YYYY\", \"timeFormat\": \"12h\"}")
  notificationSettings      Json?                      @default("{\"pushNotifications\": true, \"emailNotifications\": true, \"browserNotifications\": true}")
  securitySettings          Json?                      @default("{\"sessionTimeout\": 30, \"twoFactorEnabled\": false}")
  themeSettings             Json?                      @default("{\"theme\": \"system\", \"accentColor\": \"purple\"}")
  status                    UserStatus                 @default(ACTIVE)
  password                  String?
  lastActiveAt              DateTime?
  dataDeletionRequest       DateTime?
  dataRetentionPeriod       DateTime?
  lastDataAccess            DateTime?
  dataRetentionPolicy       Json?                      @default("{\"autoDelete\": false, \"dataCategories\": [\"personal\", \"usage\", \"analytics\"], \"retentionPeriod\": 365}")
  dataProcessingConsent     Json?                      @default("{\"analytics\": false, \"marketing\": false, \"thirdParty\": false}")
  monthlyCredits            Int                        @default(0)
  purchasedCredits          Int                        @default(0)
  displayName               String?
  isPublic                  Boolean                    @default(true)
  profileUrl                String?                    @unique
  username                  String                     @unique @default(dbgenerated("('@user'::text || (floor((random() * (1000000)::double precision)))::text)"))
  experience                Int                        @default(0)
  lastActivityDate          DateTime?
  level                     Int                        @default(1)
  longestStreak             Int                        @default(0)
  premiumCredits            Int                        @default(0)
  reputation                Int                        @default(0)
  seasonalRank              Int?
  seasonalTier              SeasonalTier?
  streak                    Int                        @default(0)
  totalCreditsEarned        Int                        @default(0)
  totalCreditsSpent         Int                        @default(0)
  totalExperience           Int                        @default(0)
  totalPromptsCreated       Int                        @default(0)
  totalPromptsShared        Int                        @default(0)
  totalVotesCast            Int                        @default(0)
  totalVotesReceived        Int                        @default(0)
  activityLogs              ActivityLog[]
  apiKeys                   ApiKey[]
  apiUsage                  ApiUsage[]
  auditLogs                 AuditLog[]
  challengeParticipations   ChallengeParticipation[]
  comments                  Comment[]
  commentLikes              CommentLike[]
  consentHistory            ConsentRecord[]
  creditHistory             CreditHistory[]
  creditPurchases           CreditPurchase[]
  dataExportRequests        DataExportRequest[]
  dataProcessingRecords     DataProcessingRecord[]
  dataRectificationRequests DataRectificationRequest[]
  deletionAuditLogs         DeletionAuditLog[]
  createdTemplates          EmailTemplate[]            @relation("CreatedTemplates")
  updatedTemplates          EmailTemplate[]            @relation("UpdatedTemplates")
  errors                    Error[]
  featureUsage              FeatureUsage[]
  followers                 Follow[]                   @relation("Follower")
  following                 Follow[]                   @relation("Following")
  levelProgressions         LevelProgression[]
  messages                  Message[]
  notifications             Notification[]
  playgroundRuns            PlaygroundRun[]
  prompts                   Prompt[]
  promptCopies              PromptCopy[]
  favoritedPrompts          PromptFavorite[]
  followedPrompts           PromptFollow[]
  promptGenerations         PromptGeneration[]
  promptRatings             PromptRating[]
  promptTemplates           PromptTemplate[]
  testHistory               PromptTestHistory[]
  promptUsages              PromptUsage[]
  reports                   Report[]
  seasonalStats             SeasonalStats[]
  streakLogs                StreakLog[]
  subscription              Subscription?
  assignedTickets           SupportTicket[]            @relation("AssignedTickets")
  supportTickets            SupportTicket[]
  ownedTeams                Team[]                     @relation("TeamOwner")
  teamMembers               TeamMember[]
  usages                    Usage[]
  userAchievements          UserAchievement[]
  userBadges                UserBadge[]
  userCollections           UserCollection[]
  settings                  UserSettings?
  versions                  Version[]
  votes                     Vote[]
  abuseInvestigations       VoteAbuseDetection[]       @relation("AbuseInvestigator")
  voteAbuseDetections       VoteAbuseDetection[]
  votePatterns              VotePattern[]
  voteRewardsReceived       VoteReward[]               @relation("VoteRewardsReceived")
  voteRewardsGiven          VoteReward[]               @relation("VoteRewardsGiven")

  @@index([clerkId])
  @@index([email])
  @@index([planType])
  @@index([status])
  @@index([lastActiveAt])
  @@index([dataRetentionPeriod])
  @@index([lastDataAccess])
  @@index([createdAt], map: "user_created_at_idx")
  @@index([updatedAt], map: "user_updated_at_idx")
  @@index([username])
  @@index([profileUrl])
  @@index([isPublic])
  @@index([level])
  @@index([reputation])
  @@index([streak])
  @@index([seasonalRank])
  @@index([seasonalTier])
}

model Plan {
  id                  String         @id @default(cuid())
  name                String         @unique
  price               Float          @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isActive            Boolean        @default(true)
  description         String
  stripeProductId     String         @default("")
  features            String[]       @default([])
  isEnterprise        Boolean        @default(false)
  stripePriceId       String         @default("")
  stripeAnnualPriceId String?
  period              String         @default("month")
  currency            String         @default("USD")
  subscriptions       Subscription[]

  @@index([isActive])
  @@index([stripeProductId])
}

model Subscription {
  id                           String             @id @default(cuid())
  userId                       String             @unique
  stripeCustomerId             String             @unique
  stripeSubscriptionId         String             @unique
  status                       SubscriptionStatus
  currentPeriodStart           DateTime
  currentPeriodEnd             DateTime
  cancelAtPeriodEnd            Boolean            @default(false)
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  planId                       String
  stripeDefaultPaymentMethodId String?
  plan                         Plan               @relation(fields: [planId], references: [id])
  user                         User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([createdAt])
  @@index([cancelAtPeriodEnd])
  @@index([updatedAt])
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  feature   String
  count     Int      @default(1)
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feature])
  @@index([timestamp])
  @@index([count])
}

model Prompt {
  id                  String              @id @default(cuid())
  userId              String
  createdAt           DateTime            @default(now())
  content             String
  description         String?
  isPublic            Boolean             @default(false)
  name                String
  updatedAt           DateTime            @updatedAt
  upvotes             Int                 @default(0)
  slug                String              @unique
  lastUsedAt          DateTime?
  lastViewedAt        DateTime?
  usageCount          Int                 @default(0)
  viewCount           Int                 @default(0)
  copyCount           Int                 @default(0)
  promptType          String              @default("default")
  metadata            Json?
  responseTime        Float?
  model               String              @default("gpt-3.5-turbo")
  dataRetentionPolicy Json?               @default("{}")
  isArchived          Boolean             @default(false)
  archivedAt          DateTime?
  favoriteCount       Int                 @default(0)
  followerCount       Int                 @default(0)
  isFeatured          Boolean             @default(false)
  isVerified          Boolean             @default(false)
  difficultyLevel     Int                 @default(1)
  downvotes           Int                 @default(0)
  isPremium           Boolean             @default(false)
  premiumTier         PremiumTier?
  qualityScore        Float               @default(0.0)
  shareCount          Int                 @default(0)
  apiUsage            ApiUsage[]
  collectionItems     CollectionItem[]
  comments            Comment[]
  likes               CommentLike[]
  playgroundRuns      PlaygroundRun[]
  user                User                @relation(fields: [userId], references: [id])
  analytics           PromptAnalytics?
  branches            PromptBranch[]
  copies              PromptCopy[]
  favorites           PromptFavorite[]
  followers           PromptFollow[]
  ratings             PromptRating[]
  testHistory         PromptTestHistory[]
  usages              PromptUsage[]
  views               PromptView[]
  reports             Report[]
  versions            Version[]
  votes               Vote[]
  voteRewards         VoteReward[]
  tags                Tag[]               @relation("PromptToTag")

  @@index([userId])
  @@index([slug])
  @@index([isPublic])
  @@index([promptType])
  @@index([model])
  @@index([lastUsedAt])
  @@index([followerCount])
  @@index([favoriteCount])
  @@index([isVerified])
  @@index([isFeatured])
  @@index([createdAt], map: "prompt_created_at_idx")
  @@index([updatedAt], map: "prompt_updated_at_idx")
  @@index([qualityScore])
  @@index([difficultyLevel])
  @@index([isPremium])
  @@index([premiumTier])
  @@index([isPublic, isFeatured])
  @@index([userId, createdAt])
  @@index([isPublic, createdAt])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique
  prompts   Prompt[] @relation("PromptToTag")

  @@index([slug])
}

model DeletionAuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   Json?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model DeletedUser {
  id              String   @id @default(cuid())
  originalUserId  String
  originalEmail   String
  originalName    String
  deletionDate    DateTime @default(now())
  retentionPeriod Int
  dataSnapshot    Json?

  @@index([originalUserId])
  @@index([deletionDate])
}

model CreditHistory {
  id          String     @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptTemplate {
  id             String   @id @default(cuid())
  userId         String?
  name           String
  description    String
  content        String
  isPublic       Boolean  @default(true)
  tags           String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  usageCount     Int      @default(0)
  rating         Float    @default(0)
  bestPractices  String[]
  complexity     String?
  example        String?
  successMetrics Json?
  type           String?
  user           User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([complexity])
  @@index([usageCount])
  @@index([rating])
}

model PromptGeneration {
  id          String   @id @default(cuid())
  userId      String
  promptType  String
  input       String
  output      String
  creditsUsed Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptType])
  @@index([createdAt])
  @@index([creditsUsed])
}

model ApiKey {
  id            String    @id @default(cuid())
  userId        String
  name          String
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  hashedKey     String    @unique
  lastRotatedAt DateTime
  scopes        String[]
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hashedKey])
}

model Vote {
  id        String      @id @default(cuid())
  userId    String
  promptId  String
  value     Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  prompt    Prompt      @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward    VoteReward?

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
}

model Comment {
  id         String        @id @default(cuid())
  userId     String
  promptId   String
  content    String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  parentId   String?
  hidden     Boolean       @default(false)
  isEdited   Boolean?      @default(false)
  editedAt   DateTime?
  isArchived Boolean?      @default(false)
  archivedAt DateTime?
  parent     Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  replies    Comment[]     @relation("CommentToComment")
  prompt     Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes      CommentLike[]
  reports    Report[]

  @@index([userId])
  @@index([promptId])
  @@index([parentId])
  @@index([hidden])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([promptId, createdAt])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  promptId  String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@index([promptId])
}

model PromptAnalytics {
  id        String   @id @default(cuid())
  promptId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
}

model PromptView {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptUsage {
  id         String   @id @default(cuid())
  promptId   String
  userId     String
  createdAt  DateTime @default(now())
  result     Json?
  tokenCount Int      @default(0)
  prompt     Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptBranch {
  id        String   @id @default(cuid())
  promptId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, name])
  @@index([promptId])
}

model PromptCopy {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([promptId])
  @@index([userId])
}

model SupportTicket {
  id                  String       @id @default(cuid())
  title               String
  description         String
  status              TicketStatus @default(OPEN)
  priority            Priority     @default(MEDIUM)
  category            Category
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userId              String
  assigneeId          String?
  dataRetentionPolicy Json?        @default("{\"autoDelete\": false, \"retentionPeriod\": 730}")
  isArchived          Boolean?     @default(false)
  archivedAt          DateTime?
  attachments         Attachment[]
  messages            Message[]
  assignee            User?        @relation("AssignedTickets", fields: [assigneeId], references: [id])
  user                User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([category])
}

model Message {
  id              String        @id @default(cuid())
  content         String
  createdAt       DateTime      @default(now())
  ticketId        String
  userId          String
  isSystemMessage Boolean       @default(false)
  updatedAt       DateTime      @updatedAt
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
}

model Attachment {
  id        String        @id @default(cuid())
  filename  String
  url       String
  type      String
  size      Int
  createdAt DateTime      @default(now())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model PlaygroundRun {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  error     String?
  input     String
  output    String?
  promptId  String?
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  status    String   @default("success")
  details   Json
  ipAddress String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model Report {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  promptId  String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  prompt    Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([promptId])
  @@index([commentId])
  @@index([createdAt])
}

model ApiUsage {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  inputTokens  Int
  outputTokens Int
  isCacheHit   Boolean  @default(false)
  userId       String
  promptId     String?
  prompt       Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId])
  @@index([promptId])
}

model Moderation {
  id          String   @id @default(cuid())
  contentId   String
  contentType String
  severity    String
  category    String
  status      String
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailSignup {
  id        String            @id @default(cuid())
  email     String            @unique
  status    EmailSignupStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([email])
  @@index([status])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  body        String
  variables   String[]
  type        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  createdById String
  updatedById String
  createdBy   User     @relation("CreatedTemplates", fields: [createdById], references: [id])
  updatedBy   User     @relation("UpdatedTemplates", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([type])
  @@index([isActive])
}

model PromptRating {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clarity     Float
  specificity Float
  context     Float
  overall     Float
  feedback    String
  promptId    String
  userId      String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
}

model PromptTestHistory {
  id              String     @id @default(cuid())
  promptId        String
  userId          String
  createdAt       DateTime   @default(now())
  tokensUsed      Int?
  duration        Int?
  input           String?
  output          String
  promptVersionId String
  status          TestStatus @default(SUCCESS)
  updatedAt       DateTime   @updatedAt
  prompt          Prompt     @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptVersion   Version    @relation(fields: [promptVersionId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
  @@index([promptVersionId])
  @@index([status])
}

model PromptTest {
  id              String   @id
  promptVersionId String
  input           String?
  output          String
  tokensUsed      Int?
  duration        Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  promptVersion   Version  @relation(fields: [promptVersionId], references: [id], onDelete: Cascade)

  @@index([promptVersionId])
}

model FeatureUsage {
  id        String   @id @default(cuid())
  userId    String
  feature   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feature])
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Team {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  ownerId   String
  settings  Json?        @default("{\"maxMembers\": 5, \"allowedFeatures\": []}")
  isActive  Boolean?     @default(true)
  owner     User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members   TeamMember[]

  @@index([ownerId])
  @@index([createdAt])
}

model UsageMetrics {
  id         String   @id @default(cuid())
  userId     String
  type       String
  tokenCount Int
  metadata   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean? @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([read])
  @@index([createdAt], map: "notification_created_at_idx")
  @@index([type], map: "notification_type_idx")
  @@index([userId], map: "notification_user_id_idx")
}

model UserSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  theme         String   @default("light")
  notifications Boolean  @default(true)
  language      String   @default("en")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Error {
  id        String   @id @default(cuid())
  type      String
  message   String
  stack     String?
  metadata  Json?
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Version {
  id                String              @id @default(cuid())
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  content           String
  convertedToPrompt Boolean             @default(false)
  userId            String
  promptId          String?
  tests             PromptTest[]
  testHistory       PromptTestHistory[]
  prompt            Prompt?             @relation(fields: [promptId], references: [id])
  user              User                @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptId])
}

model RoleChangeLog {
  id        String   @id @default(cuid())
  userId    String
  oldRole   Role
  newRole   Role
  changedBy String
  createdAt DateTime @default(now())
  action    String

  @@index([userId])
  @@index([changedBy])
}

model ConsentRecord {
  id        String   @id @default(cuid())
  userId    String
  purpose   String
  granted   Boolean
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model DataProcessingRecord {
  id                   String    @id @default(cuid())
  userId               String
  purpose              String
  legalBasis           String
  startDate            DateTime
  endDate              DateTime?
  status               String
  processingDate       DateTime? @default(now())
  dataCategories       String[]
  thirdPartyRecipients String[]
  user                 User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startDate])
  @@index([purpose])
}

model DataExportRequest {
  id          String    @id @default(cuid())
  userId      String
  status      String
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  format      String
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestedAt])
}

model DataRectificationRequest {
  id          String    @id @default(cuid())
  userId      String
  status      String
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  changes     Json
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestedAt])
}

model CreditPurchase {
  id              String   @id @default(cuid())
  userId          String
  amount          Int
  price           Float
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@index([stripeSessionId])
}

model PlanLimits {
  id          String   @id @default(cuid())
  planType    PlanType
  feature     String
  limit       Int
  period      String   @default("monthly")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([planType, feature])
  @@index([planType])
  @@index([feature])
}

model CreditPackage {
  id            String   @id @default(cuid())
  name          String
  amount        Int
  price         Float
  stripePriceId String   @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  description   String?
  isPopular     Boolean  @default(false)
  bonusCredits  Int      @default(0)

  @@index([isActive])
  @@index([stripePriceId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
}

model PromptFollow {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model PromptFavorite {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model VoteReward {
  id             String   @id @default(cuid())
  voteId         String   @unique
  voterId        String
  promptAuthorId String
  promptId       String
  creditsAwarded Int
  voterPlanType  PlanType
  createdAt      DateTime @default(now())
  ipAddress      String?
  userAgent      String?
  promptAuthor   User     @relation("VoteRewardsReceived", fields: [promptAuthorId], references: [id], onDelete: Cascade)
  prompt         Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  vote           Vote     @relation(fields: [voteId], references: [id], onDelete: Cascade)
  voter          User     @relation("VoteRewardsGiven", fields: [voterId], references: [id], onDelete: Cascade)

  @@index([voterId])
  @@index([promptAuthorId])
  @@index([promptId])
  @@index([createdAt])
  @@index([voterPlanType])
  @@index([ipAddress])
}

model VoteAbuseDetection {
  id             String            @id @default(cuid())
  userId         String
  abuseType      VoteAbuseType
  severity       VoteAbuseSeverity
  details        Json
  detectedAt     DateTime          @default(now())
  resolvedAt     DateTime?
  status         VoteAbuseStatus   @default(PENDING)
  investigatedBy String?
  resolution     String?
  investigator   User?             @relation("AbuseInvestigator", fields: [investigatedBy], references: [id])
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([abuseType])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
  @@index([investigatedBy])
}

model VotePattern {
  id                 String   @id @default(cuid())
  userId             String
  timeWindow         String
  votesCount         Int
  upvotesCount       Int
  downvotesCount     Int
  uniquePromptsVoted Int
  uniqueAuthorsVoted Int
  creditsEarned      Int
  suspiciousPatterns Json
  riskScore          Float    @default(0.0)
  lastUpdated        DateTime @default(now())
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, timeWindow])
  @@index([userId])
  @@index([riskScore])
  @@index([lastUpdated])
  @@index([timeWindow])
}

model Achievement {
  id               String              @id @default(cuid())
  name             String              @unique
  description      String
  icon             String
  category         AchievementCategory
  tier             AchievementTier     @default(BRONZE)
  requirements     Json
  rewards          Json
  isActive         Boolean             @default(true)
  isSecret         Boolean             @default(false)
  isPremium        Boolean             @default(false)
  sortOrder        Int                 @default(0)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  userAchievements UserAchievement[]

  @@index([category])
  @@index([tier])
  @@index([isActive])
  @@index([isPremium])
  @@index([sortOrder])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Json?
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([unlockedAt])
}

model Badge {
  id          String        @id @default(cuid())
  name        String        @unique
  description String
  icon        String
  color       String        @default("#6366f1")
  rarity      BadgeRarity   @default(COMMON)
  category    BadgeCategory
  isPremium   Boolean       @default(false)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userBadges  UserBadge[]

  @@index([category])
  @@index([rarity])
  @@index([isPremium])
  @@index([isActive])
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  isVisible Boolean  @default(true)
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
}

model Challenge {
  id              String                   @id @default(cuid())
  name            String
  description     String
  icon            String
  category        ChallengeCategory
  type            ChallengeType
  difficulty      ChallengeDifficulty
  requirements    Json
  rewards         Json
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int?
  isPremium       Boolean                  @default(false)
  isActive        Boolean                  @default(true)
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  participations  ChallengeParticipation[]

  @@index([category])
  @@index([type])
  @@index([difficulty])
  @@index([startDate])
  @@index([endDate])
  @@index([isPremium])
  @@index([isActive])
}

model ChallengeParticipation {
  id          String          @id @default(cuid())
  userId      String
  challengeId String
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  progress    Json
  status      ChallengeStatus @default(ACTIVE)
  rewards     Json?
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
}

model SeasonalStats {
  id                String       @id @default(cuid())
  userId            String
  season            String
  tier              SeasonalTier @default(BRONZE)
  rank              Int?
  points            Int          @default(0)
  promptsCreated    Int          @default(0)
  votesCast         Int          @default(0)
  creditsEarned     Int          @default(0)
  achievementsCount Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, season])
  @@index([userId])
  @@index([season])
  @@index([tier])
  @@index([rank])
  @@index([points])
}

model UserCollection {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  icon        String?
  isPublic    Boolean          @default(false)
  isPremium   Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  items       CollectionItem[]
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([isPremium])
  @@index([createdAt])
}

model CollectionItem {
  id           String         @id @default(cuid())
  collectionId String
  promptId     String
  addedAt      DateTime       @default(now())
  notes        String?
  collection   UserCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  prompt       Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([collectionId, promptId])
  @@index([collectionId])
  @@index([promptId])
  @@index([addedAt])
}

model ActivityLog {
  id         String       @id @default(cuid())
  userId     String
  action     ActivityType
  details    Json?
  points     Int          @default(0)
  multiplier Float        @default(1.0)
  timestamp  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([points])
  @@index([userId, timestamp])
  @@index([action, timestamp])
}

model StreakLog {
  id         String    @id @default(cuid())
  userId     String
  streakType String
  count      Int
  startDate  DateTime
  endDate    DateTime?
  isActive   Boolean   @default(true)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([streakType])
  @@index([count])
  @@index([isActive])
}

model LevelProgression {
  id               String   @id @default(cuid())
  userId           String
  fromLevel        Int
  toLevel          Int
  experienceGained Int
  rewards          Json?
  timestamp        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fromLevel])
  @@index([toLevel])
  @@index([timestamp])
}

model PremiumFeature {
  id           String   @id @default(cuid())
  name         String   @unique
  description  String
  category     String
  requiredTier PlanType
  isActive     Boolean  @default(true)
  config       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([category])
  @@index([requiredTier])
  @@index([isActive])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PlanType {
  FREE
  PRO
  ELITE
  ENTERPRISE
}

enum Period {
  WEEKLY
  MONTHLY
}

enum CreditType {
  INITIAL
  SUBSCRIPTION
  USAGE
  TOP_UP
  REFUND
  UPVOTE
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  BUG
  FEATURE_REQUEST
  GENERAL_INQUIRY
  TECHNICAL_SUPPORT
  BILLING
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum EmailSignupStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
}

enum TestStatus {
  SUCCESS
  FAILURE
  ERROR
  PENDING
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum VoteAbuseType {
  SOCKPUPPET_VOTING
  VOTE_MANIPULATION
  RAPID_VOTING
  IP_CLUSTERING
  DEVICE_FINGERPRINT_MATCH
  TEMPORAL_PATTERN_ABUSE
  COORDINATED_VOTING
  SELF_VOTE_ATTEMPT
  EXCESSIVE_VOTING_RATE
  SUSPICIOUS_ACCOUNT_AGE
}

enum VoteAbuseSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VoteAbuseStatus {
  PENDING
  INVESTIGATING
  CONFIRMED
  FALSE_POSITIVE
  RESOLVED
}

enum AchievementCategory {
  CREATOR
  VOTER
  SOCIAL
  COLLECTOR
  STREAK
  MILESTONE
  SEASONAL
  PREMIUM
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  LEGENDARY
}

enum BadgeRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  MYTHIC
}

enum BadgeCategory {
  CREATOR
  VOTER
  SOCIAL
  COLLECTOR
  ACHIEVEMENT
  SEASONAL
  PREMIUM
  SPECIAL
}

enum ChallengeCategory {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  SPECIAL
  COMMUNITY
  PREMIUM
}

enum ChallengeType {
  INDIVIDUAL
  TEAM
  COMMUNITY
  COMPETITIVE
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
  LEGENDARY
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  FAILED
  ABANDONED
}

enum SeasonalTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  MASTER
  GRANDMASTER
}

enum ActivityType {
  PROMPT_CREATED
  PROMPT_SHARED
  VOTE_CAST
  COMMENT_POSTED
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  STREAK_MILESTONE
  COLLECTION_CREATED
  CHALLENGE_COMPLETED
  PREMIUM_FEATURE_USED
}

enum PremiumTier {
  BASIC
  PREMIUM
  ELITE
  EXCLUSIVE
}
