generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  name          String?
  role          Role      @default(USER)
  planType      PlanType  @default(FREE)
  credits       Int       @default(0)
  creditCap     Int       @default(100)
  lastCreditReset DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  stripeCustomerId String?
  imageUrl      String?
  bio           String?
  jobTitle      String?
  location      String?
  company       String?
  website       String?
  twitter       String?
  linkedin      String?
  emailPreferences Json?  @default("{\"marketingEmails\":true,\"productUpdates\":true,\"securityAlerts\":true}")
  notificationSettings Json? @default("{\"emailNotifications\":true,\"pushNotifications\":true,\"browserNotifications\":true}")
  languagePreferences Json? @default("{\"language\":\"en\",\"dateFormat\":\"MM/DD/YYYY\",\"timeFormat\":\"12h\"}")
  themeSettings Json? @default("{\"theme\":\"system\",\"accentColor\":\"purple\"}")
  securitySettings Json? @default("{\"twoFactorEnabled\":false,\"sessionTimeout\":30}")

  // Relations
  prompts       Prompt[]
  comments      Comment[]
  votes         Vote[]
  commentLikes  CommentLike[]
  promptUsages  PromptUsage[]
  apiKeys       ApiKey[]
  creditHistory CreditHistory[]
  subscription  Subscription?
  promptTemplates PromptTemplate[]
  promptGenerations PromptGeneration[]
  supportTickets SupportTicket[]
  assignedTickets SupportTicket[] @relation("AssignedTickets")
  messages      Message[]
  playgroundRuns PlaygroundRun[]
  promptCopies  PromptCopy[]

  @@index([clerkId])
  @@index([email])
}

model Plan {
  id              String         @id @default(cuid())
  name            String         @unique
  price           Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isActive        Boolean        @default(true)
  credits         Int
  period          Period
  description     String
  stripeProductId String         @unique
  subscriptions   Subscription[]

  @@index([isActive])
  @@index([period])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  planId               String
  plan                 Plan               @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([createdAt])
}

model Prompt {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  content     String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        Tag[]    @relation("PromptToTag")
  upvotes     Int      @default(0)
  copyCount   Int      @default(0)
  viewCount   Int      @default(0)
  usageCount  Int      @default(0)
  versions    PromptVersion[]
  comments    Comment[]
  playgroundRuns PlaygroundRun[]
  likes       CommentLike[]
  votes       Vote[]
  analytics   PromptAnalytics?
  views       PromptView[]
  usages      PromptUsage[]
  branches    PromptBranch[]
  copies      PromptCopy[]
  lastViewedAt DateTime?
  lastUsedAt  DateTime?

  @@index([userId])
  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompts   Prompt[] @relation("PromptToTag")

  @@index([slug])
}

model CreditHistory {
  id          String     @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  content     String
  isPublic    Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptGeneration {
  id          String   @id @default(cuid())
  userId      String
  promptType  String
  input       String
  output      String
  creditsUsed Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptType])
  @@index([createdAt])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentId  String?  // Optional field for nested comments
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentToComment", fields: [parentId], references: [id], onDelete: SetNull)
  replies   Comment[] @relation("CommentToComment")
  likes     CommentLike[]

  @@index([userId])
  @@index([promptId])
  @@index([parentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId  String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@index([promptId])
}

model PromptAnalytics {
  id        String   @id @default(cuid())
  promptId  String   @unique
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromptView {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptUsage {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  result    Json?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptVersion {
  id          String   @id @default(cuid())
  promptId    String
  content     String
  description String?
  metadata    Json?
  tags        String[]
  createdAt   DateTime @default(now())
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
}

model PromptBranch {
  id        String   @id @default(cuid())
  promptId  String
  name      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, name])
  @@index([promptId])
}

model PromptCopy {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([promptId])
  @@index([userId])
}

model SupportTicket {
  id          String       @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  category    Category
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  assigneeId  String?
  user        User         @relation(fields: [userId], references: [id])
  assignee    User?        @relation("AssignedTickets", fields: [assigneeId], references: [id])
  messages    Message[]
  attachments Attachment[]

  @@index([userId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([category])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  ticketId  String
  userId    String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model PlaygroundRun {
  id        String   @id @default(cuid())
  userId    String
  promptId  String?
  input     String
  output    String?
  error     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt?  @relation(fields: [promptId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  status    String
  details   Json
  ipAddress String?
  timestamp DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  LITE
  PRO
}

enum Period {
  WEEKLY
  MONTHLY
}

enum CreditType {
  INITIAL
  SUBSCRIPTION
  USAGE
  TOP_UP
  REFUND
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  BUG
  FEATURE_REQUEST
  GENERAL_INQUIRY
  TECHNICAL_SUPPORT
  BILLING
}
