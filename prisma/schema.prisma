generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  clerkId              String             @unique
  credits              Int                @default(0)
  name                 String?
  role                 Role               @default(USER)
  creditCap            Int                @default(100)
  lastCreditReset      DateTime?
  stripeCustomerId     String?
  planType             PlanType           @default(FREE)
  imageUrl             String?
  bio                  String?
  company              String?
  jobTitle             String?
  linkedin             String?
  location             String?
  twitter              String?
  website              String?
  emailPreferences     Json?              @default("{\"productUpdates\": true, \"securityAlerts\": true, \"marketingEmails\": true}")
  languagePreferences  Json?              @default("{\"language\": \"en\", \"dateFormat\": \"MM/DD/YYYY\", \"timeFormat\": \"12h\"}")
  notificationSettings Json?              @default("{\"pushNotifications\": true, \"emailNotifications\": true, \"browserNotifications\": true}")
  securitySettings     Json?              @default("{\"sessionTimeout\": 30, \"twoFactorEnabled\": false}")
  themeSettings        Json?              @default("{\"theme\": \"system\", \"accentColor\": \"purple\"}")
  status               UserStatus         @default(ACTIVE)
  apiKeys              ApiKey[]
  apiUsage             ApiUsage[]
  auditLogs            AuditLog[]
  comments             Comment[]
  commentLikes         CommentLike[]
  creditHistory        CreditHistory[]
  messages             Message[]
  playgroundRuns       PlaygroundRun[]
  prompts              Prompt[]
  promptCopies         PromptCopy[]
  promptGenerations    PromptGeneration[]
  promptTemplates      PromptTemplate[]
  promptUsages         PromptUsage[]
  reports              Report[]
  subscription         Subscription?
  assignedTickets      SupportTicket[]    @relation("AssignedTickets")
  supportTickets       SupportTicket[]
  votes                Vote[]
  createdTemplates     EmailTemplate[]    @relation("CreatedTemplates")
  updatedTemplates     EmailTemplate[]    @relation("UpdatedTemplates")

  @@index([clerkId])
  @@index([email])
}

model Plan {
  id              String         @id @default(cuid())
  name            String         @unique
  price           Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  isActive        Boolean        @default(true)
  credits         Int
  period          Period
  description     String
  stripeProductId String         @unique
  subscriptions   Subscription[]

  @@index([isActive])
  @@index([period])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  stripeCustomerId     String             @unique
  stripeSubscriptionId String             @unique
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  planId               String
  plan                 Plan               @relation(fields: [planId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([createdAt])
}

model Prompt {
  id             String           @id @default(cuid())
  userId         String
  createdAt      DateTime         @default(now())
  content        String
  description    String?
  isPublic       Boolean          @default(false)
  name           String
  updatedAt      DateTime         @updatedAt
  upvotes        Int              @default(0)
  slug           String           @unique
  lastUsedAt     DateTime?
  lastViewedAt   DateTime?
  usageCount     Int              @default(0)
  viewCount      Int              @default(0)
  copyCount      Int              @default(0)
  apiUsage       ApiUsage[]
  comments       Comment[]
  likes          CommentLike[]
  playgroundRuns PlaygroundRun[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  analytics      PromptAnalytics?
  branches       PromptBranch[]
  copies         PromptCopy[]
  usages         PromptUsage[]
  versions       PromptVersion[]
  views          PromptView[]
  reports        Report[]
  votes          Vote[]
  tags           Tag[]            @relation("PromptToTag")

  @@index([userId])
  @@index([slug])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slug      String   @unique
  prompts   Prompt[] @relation("PromptToTag")

  @@index([slug])
}

model CreditHistory {
  id          String     @id @default(cuid())
  userId      String
  amount      Int
  type        CreditType
  description String?
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  content     String
  isPublic    Boolean  @default(false)
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PromptGeneration {
  id          String   @id @default(cuid())
  userId      String
  promptType  String
  input       String
  output      String
  creditsUsed Int
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptType])
  @@index([createdAt])
}

model ApiKey {
  id            String    @id @default(cuid())
  userId        String
  name          String
  createdAt     DateTime  @default(now())
  expiresAt     DateTime?
  hashedKey     String    @unique
  lastRotatedAt DateTime
  scopes        String[]
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hashedKey])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
}

model Comment {
  id        String        @id @default(cuid())
  userId    String
  promptId  String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parentId  String?
  hidden    Boolean       @default(false)
  parent    Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentToComment")
  prompt    Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
  reports   Report[]

  @@index([userId])
  @@index([promptId])
  @@index([parentId])
  @@index([hidden])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  promptId  String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@index([promptId])
}

model PromptAnalytics {
  id        String   @id @default(cuid())
  promptId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
}

model PromptView {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptUsage {
  id        String   @id @default(cuid())
  promptId  String
  userId    String
  createdAt DateTime @default(now())
  result    Json?
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model PromptVersion {
  id            String   @id @default(cuid())
  version       String
  content       String   @db.Text
  description   String?  @db.Text
  commitMessage String?  @db.Text
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  prompt        Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptId      String

  @@index([promptId])
}

model PromptBranch {
  id        String   @id @default(cuid())
  promptId  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, name])
  @@index([promptId])
}

model PromptCopy {
  id        String   @id @default(cuid())
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([promptId])
  @@index([userId])
}

model SupportTicket {
  id          String       @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority     @default(MEDIUM)
  category    Category
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  assigneeId  String?
  attachments Attachment[]
  messages    Message[]
  assignee    User?        @relation("AssignedTickets", fields: [assigneeId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([category])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  isSystemMessage Boolean @default(false)

  @@index([ticketId])
  @@index([userId])
}

model Attachment {
  id        String        @id @default(cuid())
  filename  String
  url       String
  type      String
  size      Int
  createdAt DateTime      @default(now())
  ticketId  String
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model PlaygroundRun {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  error     String?
  input     String
  output    String?
  promptId  String?
  prompt    Prompt?  @relation(fields: [promptId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  status    String   @default("success")
  details   Json
  ipAddress String?
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

model Report {
  id        String   @id @default(cuid())
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  promptId  String?
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  prompt    Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([promptId])
  @@index([commentId])
  @@index([createdAt])
}

model ApiUsage {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  inputTokens  Int
  outputTokens Int
  isCacheHit   Boolean  @default(false)
  userId       String
  promptId     String?
  prompt       Prompt?  @relation(fields: [promptId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId])
  @@index([promptId])
}

model Moderation {
  id          String   @id @default(cuid())
  contentId   String
  contentType String
  severity    String
  category    String
  status      String
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailSignup {
  id        String            @id @default(cuid())
  email     String            @unique
  status    EmailSignupStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@index([email])
  @@index([status])
}

model EmailTemplate {
  id          String   @id @default(cuid())
  name        String
  subject     String
  body        String
  variables   String[]
  type        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String
  createdBy   User     @relation("CreatedTemplates", fields: [createdById], references: [id])
  updatedBy   User     @relation("UpdatedTemplates", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([type])
  @@index([isActive])
}

enum Role {
  USER
  ADMIN
}

enum PlanType {
  FREE
  LITE
  PRO
}

enum Period {
  WEEKLY
  MONTHLY
}

enum CreditType {
  INITIAL
  SUBSCRIPTION
  USAGE
  TOP_UP
  REFUND
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Category {
  BUG
  FEATURE_REQUEST
  GENERAL_INQUIRY
  TECHNICAL_SUPPORT
  BILLING
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum EmailSignupStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
}
