generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// CORE USER & AUTH
// ============================================

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  clerkId               String    @unique
  name                  String?
  username              String    @unique @default(dbgenerated("('@user'::text || (floor((random() * (1000000)::double precision)))::text)"))
  role                  Role      @default(USER)
  planType              PlanType  @default(FREE)
  status                UserStatus @default(ACTIVE)
  
  // Profile
  imageUrl              String?
  bio                   String?
  displayName           String?
  
  // Credits & Billing
  monthlyCredits        Int       @default(0)
  purchasedCredits      Int       @default(0)
  creditCap             Int       @default(100)
  lastCreditReset       DateTime?
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  
  // Settings (JSON)
  emailPreferences      Json?     @default("{\"productUpdates\": true, \"securityAlerts\": true, \"marketingEmails\": true}")
  notificationSettings  Json?     @default("{\"pushNotifications\": true, \"emailNotifications\": true}")
  themeSettings         Json?     @default("{\"theme\": \"system\", \"accentColor\": \"purple\"}")
  securitySettings      Json?     @default("{\"sessionTimeout\": 30, \"twoFactorEnabled\": false}")
  
  // GDPR
  smartRoutingEnabled   Boolean   @default(true)
  deletedAt             DateTime?
  dataRetentionPolicy   Json?     @default("{\"autoDelete\": false, \"retentionPeriod\": 365}")
  dataProcessingConsent Json?     @default("{\"analytics\": false, \"marketing\": false, \"thirdParty\": false}")
  
  // Timestamps
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  lastActiveAt          DateTime?
  
  // Relations
  ApiKey                ApiKey[]
  ApiUsage              ApiUsage[]
  AuditLog              AuditLog[]
  Comment               Comment[]
  CommentLike           CommentLike[]
  ConsentRecord         ConsentRecord[]
  CreditHistory         CreditHistory[]
  CreditPurchase        CreditPurchase[]
  DataExportRequest     DataExportRequest[]
  DataRectificationRequest DataRectificationRequest[]
  DataRetentionSchedule DataRetentionSchedule[]
  DeletionAuditLog      DeletionAuditLog[]
  EmailTemplate_createdBy EmailTemplate[] @relation("EmailTemplate_createdByIdToUser")
  EmailTemplate_updatedBy EmailTemplate[] @relation("EmailTemplate_updatedByIdToUser")
  Error                 Error[]
  FeatureUsage          FeatureUsage[]
  Follow_follower       Follow[] @relation("Follow_followerIdToUser")
  Follow_following      Follow[] @relation("Follow_followingIdToUser")
  Message               Message[]
  Notification          Notification[]
  Prompt                Prompt[]
  PromptCopy            PromptCopy[]
  PromptGeneration      PromptGeneration[]
  PromptTemplate        PromptTemplate[]
  PromptUsage           PromptUsage[]
  Subscription          Subscription?
  SupportTicket_assignee SupportTicket[] @relation("SupportTicket_assigneeIdToUser")
  SupportTicket_user    SupportTicket[] @relation("SupportTicket_userIdToUser")
  TeamMember            TeamMember[]
  Usage                 Usage[]
  UserAchievement       UserAchievement[]
  UserCollection        UserCollection[]
  UserConsent           UserConsent[]
  UserOnboarding        UserOnboarding[]
  Version               Version[]
  Vote                  Vote[]
  VoteAbuseDetection_investigated VoteAbuseDetection[] @relation("VoteAbuseDetection_investigatedByToUser")
  VoteAbuseDetection_user VoteAbuseDetection[] @relation("VoteAbuseDetection_userIdToUser")
  VotePattern           VotePattern[]
  VoteReward_author     VoteReward[] @relation("VoteReward_promptAuthorIdToUser")
  VoteReward_voter      VoteReward[] @relation("VoteReward_voterIdToUser")
  PromptRuns            PromptRun[] @relation("UserPromptRuns")
  Alerts                Alert[] @relation("UserAlerts")
  PromptOptimizations   PromptOptimization[]
  QualityFeedback       QualityFeedback[]
  ChallengeParticipation ChallengeParticipation[]
  ActivityLog           ActivityLog[]

  @@index([clerkId])
  @@index([email])
  @@index([username])
  @@index([planType])
  @@index([status])
  @@index([lastActiveAt])
  @@index([createdAt])
  @@index([updatedAt])
}

model ApiKey {
  id            String    @id
  userId        String
  name          String
  hashedKey     String    @unique
  scopes        String[]
  expiresAt     DateTime?
  lastRotatedAt DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  User          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([hashedKey])
  @@index([userId])
}

// ============================================
// PROMPTS & CONTENT
// ============================================

model Prompt {
  id                  String    @id @default(cuid())
  userId              String
  name                String
  slug                String    @unique
  content             String
  description         String?
  model               String    @default("gpt-3.5-turbo")
  promptType          String    @default("default")
  metadata            Json?
  
  // Visibility & Status
  isPublic            Boolean   @default(false)
  isFeatured          Boolean   @default(false)
  isVerified          Boolean   @default(false)
  isPremium           Boolean   @default(false)
  isArchived          Boolean   @default(false)
  archivedAt          DateTime?
  
  // Metrics
  upvotes             Int       @default(0)
  downvotes           Int       @default(0)
  usageCount          Int       @default(0)
  viewCount           Int       @default(0)
  copyCount           Int       @default(0)
  
  // GDPR
  dataRetentionPolicy Json?     @default("{}")
  
  // Timestamps
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastUsedAt          DateTime?
  
  // Relations
  User                User      @relation(fields: [userId], references: [id])
  ApiUsage            ApiUsage[]
  Comment             Comment[]
  CommentLike         CommentLike[]
  PromptCopy          PromptCopy[]
  PromptUsage         PromptUsage[]
  Version             Version[]
  Vote                Vote[]
  VoteReward          VoteReward[]

  @@index([userId])
  @@index([slug])
  @@index([isPublic])
  @@index([isFeatured])
  @@index([isPremium])
  @@index([isVerified])
  @@index([model])
  @@index([promptType])
  @@index([createdAt])
  @@index([updatedAt])
  @@index([lastUsedAt])
}

model Version {
  id                String   @id @default(cuid())
  promptId          String?
  userId            String
  version           Int      @default(1)
  content           String
  convertedToPrompt Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  Prompt            Prompt?  @relation(fields: [promptId], references: [id])
  User              User     @relation(fields: [userId], references: [id])

  @@unique([promptId, version])
  @@index([promptId])
  @@index([userId])
}

model PromptTemplate {
  id             String   @id
  userId         String?
  name           String
  description    String
  content        String
  type           String?
  complexity     String?
  tags           String[]
  isPublic       Boolean  @default(true)
  usageCount     Int      @default(0)
  rating         Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  
  User           User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([complexity])
  @@index([usageCount])
  @@index([rating])
}


// ============================================
// USAGE & ANALYTICS
// ============================================

model ApiUsage {
  id           String   @id
  userId       String
  promptId     String?
  inputTokens  Int
  outputTokens Int
  isCacheHit   Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Prompt       Prompt?  @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([promptId])
  @@index([createdAt])
}

model PromptUsage {
  id         String   @id
  promptId   String
  userId     String
  tokenCount Int      @default(0)
  result     Json?
  createdAt  DateTime @default(now())
  
  Prompt     Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([promptId])
  @@index([userId])
}

model Usage {
  id        String   @id
  userId    String
  feature   String
  count     Int      @default(1)
  timestamp DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feature])
  @@index([timestamp])
  @@index([count])
}

model UsageMetrics {
  id         String   @id
  userId     String
  type       String
  tokenCount Int
  metadata   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}

model PromptRun {
  id             String   @id @default(cuid())
  userId         String
  promptId       String
  provider       String
  model          String
  requestedModel String?
  input          String   @db.Text
  output         String   @db.Text
  tokensUsed     Int
  totalTokens    Int      @default(0)
  inputTokens    Int      @default(0)
  outputTokens   Int      @default(0)
  cost           Float
  savings        Float    @default(0)
  latency        Int
  success        Boolean
  error          String?
  createdAt      DateTime @default(now())
  
  User           User     @relation("UserPromptRuns", fields: [userId], references: [id], onDelete: Cascade)
  QualityFeedback QualityFeedback[]
  
  @@index([userId, createdAt])
  @@index([promptId])
  @@index([provider])
  @@index([model])
  @@index([success])
}

model PromptOptimization {
  id               String   @id @default(cuid())
  userId           String
  originalPrompt   String   @db.Text
  optimizedPrompt  String   @db.Text
  tokenReduction   Int
  estimatedSavings Float
  targetModel      String
  createdAt        DateTime @default(now())
  
  User             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

model QualityFeedback {
  id        String   @id @default(cuid())
  userId    String
  runId     String
  rating    Int
  feedback  String?
  createdAt DateTime @default(now())
  
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Run       PromptRun @relation(fields: [runId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([runId])
  @@index([createdAt])
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  type      String
  threshold Float
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  User      User     @relation("UserAlerts", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([enabled])
}

// ============================================
// BILLING & SUBSCRIPTIONS
// ============================================

model Plan {
  id                  String         @id
  name                String         @unique
  description         String
  price               Float          @default(0)
  period              String         @default("month")
  currency            String         @default("USD")
  stripeProductId     String         @default("")
  stripePriceId       String         @default("")
  stripeAnnualPriceId String?
  features            String[]       @default([])
  isActive            Boolean        @default(true)
  isEnterprise        Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime
  
  Subscription        Subscription[]

  @@index([isActive])
  @@index([stripeProductId])
}

model PlanLimits {
  id          String   @id
  planType    PlanType
  feature     String
  limit       Int
  period      String   @default("monthly")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([planType, feature])
  @@index([planType])
  @@index([feature])
}

model Subscription {
  id                           String             @id
  userId                       String             @unique
  planId                       String
  stripeCustomerId             String             @unique
  stripeSubscriptionId         String             @unique
  stripeDefaultPaymentMethodId String?
  status                       SubscriptionStatus
  currentPeriodStart           DateTime
  currentPeriodEnd             DateTime
  cancelAtPeriodEnd            Boolean            @default(false)
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime
  
  User                         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  Plan                         Plan               @relation(fields: [planId], references: [id])

  @@index([userId])
  @@index([planId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
  @@index([cancelAtPeriodEnd])
  @@index([createdAt])
  @@index([updatedAt])
}

model CreditPackage {
  id            String   @id
  name          String
  description   String?
  amount        Int
  bonusCredits  Int      @default(0)
  price         Float
  stripePriceId String   @unique
  isActive      Boolean  @default(true)
  isPopular     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime

  @@index([isActive])
  @@index([stripePriceId])
}

model CreditPurchase {
  id              String   @id
  userId          String
  amount          Int
  price           Float
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  
  User            User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([stripeSessionId])
  @@index([createdAt])
}

model CreditHistory {
  id          String     @id
  userId      String
  amount      Int
  type        CreditType
  description String?
  createdAt   DateTime   @default(now())
  
  User        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model PremiumFeature {
  id           String   @id
  name         String   @unique
  description  String
  category     String
  requiredTier PlanType
  isActive     Boolean  @default(true)
  config       Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([category])
  @@index([isActive])
  @@index([requiredTier])
}


// ============================================
// COMMUNITY & SOCIAL
// ============================================

model Comment {
  id            String        @id
  userId        String
  promptId      String
  parentId      String?
  content       String
  hidden        Boolean       @default(false)
  isEdited      Boolean?      @default(false)
  editedAt      DateTime?
  isArchived    Boolean?      @default(false)
  archivedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Prompt        Prompt        @relation(fields: [promptId], references: [id], onDelete: Cascade)
  Parent        Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  Replies       Comment[]     @relation("CommentToComment")
  CommentLike   CommentLike[]

  @@index([userId])
  @@index([promptId])
  @@index([parentId])
  @@index([hidden])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([promptId, createdAt])
}

model CommentLike {
  id        String   @id
  userId    String
  commentId String
  promptId  String
  createdAt DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  Prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@index([promptId])
}

model Vote {
  id         String      @id
  userId     String
  promptId   String
  value      Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Prompt     Prompt      @relation(fields: [promptId], references: [id], onDelete: Cascade)
  VoteReward VoteReward?

  @@unique([userId, promptId])
  @@index([userId])
  @@index([promptId])
}

model VoteReward {
  id             String   @id
  voteId         String   @unique
  voterId        String
  promptAuthorId String
  promptId       String
  creditsAwarded Int
  voterPlanType  PlanType
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())
  
  Vote           Vote     @relation(fields: [voteId], references: [id], onDelete: Cascade)
  Voter          User     @relation("VoteReward_voterIdToUser", fields: [voterId], references: [id], onDelete: Cascade)
  Author         User     @relation("VoteReward_promptAuthorIdToUser", fields: [promptAuthorId], references: [id], onDelete: Cascade)
  Prompt         Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@index([voterId])
  @@index([promptAuthorId])
  @@index([promptId])
  @@index([voterPlanType])
  @@index([ipAddress])
  @@index([createdAt])
}

model VoteAbuseDetection {
  id             String            @id
  userId         String
  abuseType      VoteAbuseType
  severity       VoteAbuseSeverity
  status         VoteAbuseStatus   @default(PENDING)
  details        Json
  detectedAt     DateTime          @default(now())
  resolvedAt     DateTime?
  investigatedBy String?
  resolution     String?
  
  User           User              @relation("VoteAbuseDetection_userIdToUser", fields: [userId], references: [id], onDelete: Cascade)
  Investigator   User?             @relation("VoteAbuseDetection_investigatedByToUser", fields: [investigatedBy], references: [id])

  @@index([userId])
  @@index([abuseType])
  @@index([severity])
  @@index([status])
  @@index([investigatedBy])
  @@index([detectedAt])
}

model VotePattern {
  id                 String   @id
  userId             String
  timeWindow         String
  votesCount         Int
  upvotesCount       Int
  downvotesCount     Int
  uniquePromptsVoted Int
  uniqueAuthorsVoted Int
  creditsEarned      Int
  suspiciousPatterns Json
  riskScore          Float    @default(0.0)
  lastUpdated        DateTime @default(now())
  
  User               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, timeWindow])
  @@index([userId])
  @@index([timeWindow])
  @@index([riskScore])
  @@index([lastUpdated])
}

model Follow {
  id          String   @id
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  Follower    User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  Following   User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@index([createdAt])
}

model PromptCopy {
  id        String   @id
  promptId  String
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  Prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])

  @@index([promptId])
  @@index([userId])
}

model PromptGeneration {
  id          String   @id
  userId      String
  promptType  String
  input       String
  output      String
  creditsUsed Int
  createdAt   DateTime @default(now())
  
  User        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([promptType])
  @@index([creditsUsed])
  @@index([createdAt])
}

// ============================================
// SUPPORT & NOTIFICATIONS
// ============================================

model SupportTicket {
  id                  String       @id
  userId              String
  assigneeId          String?
  title               String
  description         String
  category            Category
  status              TicketStatus @default(OPEN)
  priority            Priority     @default(MEDIUM)
  dataRetentionPolicy Json?        @default("{\"autoDelete\": false, \"retentionPeriod\": 730}")
  isArchived          Boolean?     @default(false)
  archivedAt          DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime
  
  User                User         @relation("SupportTicket_userIdToUser", fields: [userId], references: [id])
  Assignee            User?        @relation("SupportTicket_assigneeIdToUser", fields: [assigneeId], references: [id])
  Message             Message[]
  Attachment          Attachment[]

  @@index([userId])
  @@index([assigneeId])
  @@index([category])
  @@index([status])
  @@index([priority])
}

model Message {
  id              String        @id
  ticketId        String
  userId          String
  content         String
  isSystemMessage Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  
  Ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
}

model Attachment {
  id       String        @id
  ticketId String
  filename String
  url      String
  type     String
  size     Int
  createdAt DateTime     @default(now())
  
  Ticket   SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
}

model Notification {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  metadata  Json?
  read      Boolean  @default(false)
  isRead    Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([read])
  @@index([createdAt])
}

model EmailSignup {
  id        String            @id
  email     String            @unique
  status    EmailSignupStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime

  @@index([email])
  @@index([status])
}

model EmailTemplate {
  id          String   @id
  name        String
  subject     String
  body        String
  type        String
  variables   String[]
  isActive    Boolean  @default(true)
  createdById String
  updatedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  
  CreatedBy   User     @relation("EmailTemplate_createdByIdToUser", fields: [createdById], references: [id])
  UpdatedBy   User     @relation("EmailTemplate_updatedByIdToUser", fields: [updatedById], references: [id])

  @@index([type])
  @@index([isActive])
  @@index([createdById])
  @@index([updatedById])
}


// ============================================
// GDPR & COMPLIANCE
// ============================================

model ConsentRecord {
  id        String   @id
  userId    String
  purpose   String
  granted   Boolean
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model UserConsent {
  id          String   @id
  userId      String
  consentType String
  granted     Boolean
  grantedAt   DateTime @default(now())
  
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, consentType])
}

model DataExportRequest {
  id          String    @id
  userId      String
  status      String
  format      String
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  
  User        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestedAt])
}

model DataRectificationRequest {
  id          String    @id
  userId      String
  status      String
  changes     Json
  requestedAt DateTime  @default(now())
  completedAt DateTime?
  
  User        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([requestedAt])
}

model DataRetentionSchedule {
  id                String    @id
  userId            String
  scheduledDeletion DateTime
  status            String    @default("SCHEDULED")
  requestedAt       DateTime  @default(now())
  completedAt       DateTime?
  
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([scheduledDeletion, status])
}

model DeletedUser {
  id              String   @id
  originalUserId  String
  originalEmail   String
  originalName    String
  deletionDate    DateTime @default(now())
  retentionPeriod Int
  dataSnapshot    Json?

  @@index([originalUserId])
  @@index([deletionDate])
}

model DeletionAuditLog {
  id        String   @id
  userId    String
  action    String
  details   Json?
  timestamp DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model BreachLog {
  id                  String    @id @default(cuid())
  detectedAt          DateTime  @default(now())
  breachType          String
  severity            String
  affectedUsersCount  Int
  dataCategories      String[]
  containmentActions  String    @db.Text
  authorityNotifiedAt DateTime?
  usersNotifiedAt     DateTime?
  resolutionDate      DateTime?
  lessonsLearned      String?   @db.Text
  rootCause           String?   @db.Text
  
  @@index([detectedAt])
  @@index([severity])
  @@index([breachType])
}

model AuditLog {
  id        String   @id
  userId    String?
  action    String
  resource  String
  status    String   @default("success")
  details   Json
  ipAddress String?
  timestamp DateTime @default(now())
  
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
}

// ============================================
// GAMIFICATION (Minimal)
// ============================================

model Achievement {
  id              String              @id
  name            String              @unique
  description     String
  icon            String
  category        AchievementCategory
  tier            AchievementTier     @default(BRONZE)
  requirements    Json
  rewards         Json
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime
  
  UserAchievement UserAchievement[]

  @@index([category])
  @@index([isActive])
}

model UserAchievement {
  id            String      @id
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  progress      Json?
  
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([unlockedAt])
}

model Challenge {
  id                     String                   @id
  name                   String
  description            String
  icon                   String
  category               ChallengeCategory
  type                   ChallengeType
  difficulty             ChallengeDifficulty
  requirements           Json
  rewards                Json
  startDate              DateTime
  endDate                DateTime
  maxParticipants        Int?
  isPremium              Boolean                  @default(false)
  isActive               Boolean                  @default(true)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  
  ChallengeParticipation ChallengeParticipation[]

  @@index([category])
  @@index([difficulty])
  @@index([type])
  @@index([isActive])
  @@index([isPremium])
  @@index([startDate])
  @@index([endDate])
}

model ChallengeParticipation {
  id          String          @id
  userId      String
  challengeId String
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  progress    Json
  status      ChallengeStatus @default(ACTIVE)
  rewards     Json?
  
  User        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@index([userId])
  @@index([challengeId])
  @@index([status])
  @@index([startedAt])
  @@index([completedAt])
}

model ActivityLog {
  id         String       @id
  userId     String
  action     ActivityType
  details    Json?
  points     Int          @default(0)
  multiplier Float        @default(1.0)
  timestamp  DateTime     @default(now())
  
  User       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([points])
  @@index([action, timestamp])
  @@index([userId, timestamp])
}

model UserCollection {
  id          String   @id
  userId      String
  name        String
  description String?
  icon        String?
  isPublic    Boolean  @default(false)
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPublic])
  @@index([isPremium])
  @@index([createdAt])
}

// ============================================
// TEAMS (Minimal)
// ============================================

model TeamMember {
  id       String   @id
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())
  
  User     User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

// ============================================
// MISC
// ============================================

model UserOnboarding {
  id        String   @id
  userId    String
  step      String
  completed Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, step])
  @@index([userId])
}

model FeatureUsage {
  id        String   @id
  userId    String
  feature   String
  createdAt DateTime @default(now())
  
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([feature])
}

model Error {
  id        String   @id
  userId    String?
  type      String
  message   String
  stack     String?
  metadata  Json?
  createdAt DateTime @default(now())
  
  User      User?    @relation(fields: [userId], references: [id])
}

model RoleChangeLog {
  id        String   @id
  userId    String
  oldRole   Role
  newRole   Role
  changedBy String
  action    String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([changedBy])
}

// ============================================
// ENUMS
// ============================================

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PlanType {
  FREE
  PRO
  ELITE
  ENTERPRISE
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum CreditType {
  INITIAL
  SUBSCRIPTION
  USAGE
  TOP_UP
  REFUND
  UPVOTE
}

enum Category {
  BUG
  FEATURE_REQUEST
  GENERAL_INQUIRY
  TECHNICAL_SUPPORT
  BILLING
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EmailSignupStatus {
  PENDING
  CONFIRMED
  UNSUBSCRIBED
}

enum AchievementCategory {
  CREATOR
  VOTER
  SOCIAL
  COLLECTOR
  STREAK
  MILESTONE
  SEASONAL
  PREMIUM
}

enum AchievementTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
  LEGENDARY
}

enum ActivityType {
  PROMPT_CREATED
  PROMPT_SHARED
  VOTE_CAST
  COMMENT_POSTED
  ACHIEVEMENT_UNLOCKED
  LEVEL_UP
  STREAK_MILESTONE
  COLLECTION_CREATED
  CHALLENGE_COMPLETED
  PREMIUM_FEATURE_USED
}

enum ChallengeCategory {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  SPECIAL
  COMMUNITY
  PREMIUM
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
  LEGENDARY
}

enum ChallengeStatus {
  ACTIVE
  COMPLETED
  FAILED
  ABANDONED
}

enum ChallengeType {
  INDIVIDUAL
  TEAM
  COMMUNITY
  COMPETITIVE
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum VoteAbuseType {
  SOCKPUPPET_VOTING
  VOTE_MANIPULATION
  RAPID_VOTING
  IP_CLUSTERING
  DEVICE_FINGERPRINT_MATCH
  TEMPORAL_PATTERN_ABUSE
  COORDINATED_VOTING
  SELF_VOTE_ATTEMPT
  EXCESSIVE_VOTING_RATE
  SUSPICIOUS_ACCOUNT_AGE
}

enum VoteAbuseSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum VoteAbuseStatus {
  PENDING
  INVESTIGATING
  CONFIRMED
  FALSE_POSITIVE
  RESOLVED
}
